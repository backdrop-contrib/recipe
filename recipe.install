<?php

/**
 * @file
 * Install, update and uninstall functions for the recipe module.
 */

/**
 * Implements hook_install().
 */
function recipe_install() {
  // Set up the recipe node type.
  require_once(dirname(__FILE__) . '/includes/recipe.node_type.inc');

  // Create recipe node type.
  $recipe_type = array(
    'type' => 'recipe',
    'name' => t('Recipe'),
    'base' => 'recipe',
    'description' => t('Share your favorite recipes with your fellow cooks.'),
    // 'custom' => 1,
    // 'modified' => 1,
    // 'locked' => 0,
    // 'is_new' => TRUE,
    // 'settings' => array(
    //   'promote_enabled' => FALSE,
    // ),
  );
  $recipe_type = node_type_set_defaults($recipe_type);
  node_type_save($recipe_type);
  // node_add_body_field($recipe_type);

  // Add fields.
  _recipe_install_node_type();
  // Dynamically generated variable data was detected on the following lines.
  // /recipe/recipe.module line 301
  // /recipe/recipe.landing.page.inc line 46
}

/**
 * Implements hook_uninstall().
 *
 * Automatically drops tables in hook_schema.
 */
function recipe_uninstall() {
  // Delete the recipe node fields.
  require_once(dirname(__FILE__) . '/includes/recipe.node_type.inc');
  _recipe_uninstall_node_type();

  // remove node revisions
  db_query('DELETE FROM {node_revision} WHERE nid in (select nid from {node} WHERE type = :type)', array(':type' => 'recipe'));
  // remove recipe nodes
  db_query('DELETE FROM {node} WHERE type = :type', array(':type' => 'recipe'));

  // remove variables
  //db_query('DELETE FROM {variable} WHERE name like :type', array(':type' => 'recipe_%'));
  // TODO remove config
}

/**
 * Implements hook_schema().
 */
function recipe_schema() {
  $schema['recipe'] = array(
    'fields' => array(
      'nid' => array(
        'description' => 'The primary identifier for a recipe.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'source' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 255,
      ),
      'yield' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'yield_unit' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The units for the yield field(servings, people, cans, cookies, etc).',
      ),
      'description' => array(
        'type' => 'text',
      ),
      'instructions' => array(
        'type' => 'text',
      ),
      'notes' => array(
        'type' => 'text',
      ),
      'preptime' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'cooktime' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['recipe_ingredient'] = array(
    'description' => 'The base table for recipe ingredients.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a recipe ingredient.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'link' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function recipe_field_schema($field) {
  return array(
    'columns' => array(
      'iid' => array(
        'description' => 'The {recipe_ingredient}.id referenced by field.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'quantity' => array(
        'type' => 'float',
        'not null' => FALSE,
      ),
      'unit_key' => array(
        'description' => 'Untranslated unit key from the units array.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'note' => array(
        'description' => 'Ingredient processing or notes related to recipe.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'iid' => array('iid'),
    ),
    'foreign keys' => array(
      'iid' => array(
        'table' => 'recipe_ingredient',
        'columns' => array('iid' => 'id'),
      ),
    ),
  );
}

/**
 * Loads the recipe_units table.
 */
function _recipe_populate_units() {
  $units = _recipe_get_default_units();
  foreach ( $units as $u ) {
    db_insert('recipe_unit')
      ->fields(array(
      'name' => $u['name'],
      'abbreviation' => $u['abbreviation'],
      'metric' => $u['metric'],
      'type' => $u['type'],
      'aliases' => $u['aliases'],
    ))
      ->execute();
  }
  return TRUE;
}

/**
 * Returns an array of the default unit values.
 *
 * This is used to fill the recipe_unit table.
 */
function _recipe_get_default_units() {
  $units = array(
    array(
      'name' => 'Slice',
      'abbreviation' => 'sli',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => '',
    ),
    array(
      'name' => 'Unit',
      'abbreviation' => '',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => 'each,ea,whole',
    ),
    array(
      'name' => 'Clove',
      'abbreviation' => 'clv',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => '',
    ),
    array(
      'name' => 'Pinch',
      'abbreviation' => 'pn',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => '',
    ),
    array(
      'name' => 'Package',
      'abbreviation' => 'pk',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => 'pack',
    ),
    array(
      'name' => 'Can',
      'abbreviation' => 'cn',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => 'jar',
    ),
    array(
      'name' => 'Drop',
      'abbreviation' => 'dr',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => '',
    ),
    array(
      'name' => 'Bunch',
      'abbreviation' => 'bn',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => '',
    ),
    array(
      'name' => 'Dash',
      'abbreviation' => 'ds',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => '',
    ),
    array(
      'name' => 'Carton',
      'abbreviation' => 'ct',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => '',
    ),
    array(
      'name' => 'Cup',
      'abbreviation' => 'c',
      'metric' => 0,
      'type' => 'Volume',
      'aliases' => '',
    ),
    array(
      'name' => 'Tablespoon',
      'abbreviation' => 'T',
      'metric' => 0,
      'type' => 'Volume',
      'aliases' => 'tbsp,tb',
    ),
    array(
      'name' => 'Teaspoon',
      'abbreviation' => 't',
      'metric' => 0,
      'type' => 'Volume',
      'aliases' => 'tsp',
    ),
    array(
      'name' => 'Pound',
      'abbreviation' => 'lb',
      'metric' => 0,
      'type' => 'Mass',
      'aliases' => '',
    ),
    array(
      'name' => 'Ounce',
      'abbreviation' => 'oz',
      'metric' => 0,
      'type' => 'Mass',
      'aliases' => '',
    ),
    array(
      'name' => 'Pint',
      'abbreviation' => 'pt',
      'metric' => 0,
      'type' => 'Volume',
      'aliases' => '',
    ),
    array(
      'name' => 'Quart',
      'abbreviation' => 'q',
      'metric' => 0,
      'type' => 'Volume',
      'aliases' => '',
    ),
    array(
      'name' => 'Gallon',
      'abbreviation' => 'gal',
      'metric' => 0,
      'type' => 'Volume',
      'aliases' => '',
    ),
    array(
      'name' => 'Milligram',
      'abbreviation' => 'mg',
      'metric' => 1,
      'type' => 'Mass',
      'aliases' => '',
    ),
    array(
      'name' => 'Centigram',
      'abbreviation' => 'cg',
      'metric' => 1,
      'type' => 'Mass',
      'aliases' => '',
    ),
    array(
      'name' => 'Gram',
      'abbreviation' => 'g',
      'metric' => 1,
      'type' => 'Mass',
      'aliases' => '',
    ),
    array(
      'name' => 'Kilogram',
      'abbreviation' => 'kg',
      'metric' => 1,
      'type' => 'Mass',
      'aliases' => '',
    ),
    array(
      'name' => 'Millilitre',
      'abbreviation' => 'ml',
      'metric' => 1,
      'type' => 'Volume',
      'aliases' => '',
    ),
    array(
      'name' => 'Centilitre',
      'abbreviation' => 'cl',
      'metric' => 1,
      'type' => 'Volume',
      'aliases' => '',
    ),
    array(
      'name' => 'Litre',
      'abbreviation' => 'l',
      'metric' => 1,
      'type' => 'Volume',
      'aliases' => '',
    ),
    array(
      'name' => 'Decilitre',
      'abbreviation' => 'dl',
      'metric' => 1,
      'type' => 'Volume',
      'aliases' => '',
    ),
    array(
      'name' => 'Tablespoon (Metric)',
      'abbreviation' => 'tbsp',
      'metric' => 1,
      'type' => 'Volume',
      'aliases' => 'T',
    ),
    array(
      'name' => 'Teaspoon (Metric)',
      'abbreviation' => 'tsp',
      'metric' => 1,
      'type' => 'Volume',
      'aliases' => 't',
    ),
    array(
      'name' => 'Unknown',
      'abbreviation' => 'Unknown',
      'metric' => 0,
      'type' => 'Unit',
      'aliases' => '',
    ),
  );
  return $units;
}

/**
 * Implements hook_update_last_removed().
 */
function recipe_update_last_removed() {
  return 7209;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function recipe_update_1000() { }
